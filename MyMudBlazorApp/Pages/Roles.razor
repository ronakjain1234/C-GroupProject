@page "/roles"
@using Web = DatabaseHandler.Data.Models.Web.ResponseObjects;
@using DatabaseHandler.Data.Models.Web.ResponseObjects;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<style>
.mud-table th, .mud-table td {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    padding: 8px 16px;
    vertical-align: middle;
}

.rolesTable {
    /* Remove max-height to prevent inner scrolling */
    width: 100%; /* Use full width of container */
    margin: 0 auto;
}

.search-field {
    margin-left: 16px;
}

.role-name-cell {
    min-width: 720px;
}

.actions-cell {
    display: flex;
    gap: 8px;
    align-items: center;
}

.page-title {
    margin-bottom: 16px;
    width: 90%;
    margin-left: auto;
    margin-right: auto;
}

.endpoint-table {
    margin-top: 0;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    max-height: fit-content;
}

.endpoint-paper {
    background-color: #fafafa;
    padding: 8px;
    margin-bottom: 0;
}

.module-title {
    font-weight: 500;
    margin-bottom: 16px;
}

/* Styling for tabs */
.mud-tabs-panels {
    padding: 0 !important;
}

.mud-tab-slider {
    background-color: var(--mud-palette-primary);
}

.swipeable-tabs .mud-tabs-toolbar {
    justify-content: center;
}

.swipeable-tabs .mud-tabs-panels {
    min-height: 0;
    padding: 0 !important;
}

.compact-dialog {
    width: 700px;
    max-width: 90vw;
    max-height: 80vh;
}

/* Styling for main content tabs */
.main-tabs {
    margin-top: 16px;
    width: 90%;
    margin-left: auto;
    margin-right: auto;
}

.main-tabs .mud-tabs-panels {
    min-height: 500px; /* Set consistent height for all tab panels */
    overflow-y: auto; /* Add scrolling to the tab panels instead of tables */
}

.empty-selection {
    padding: 32px;
    text-align: center;
    color: var(--mud-palette-text-secondary);
}

.entirePage {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

.tab-content-container {
    width: 100%;
    height: 100%;
}

.endpoint-selection-container {
    width: 100%;
    height: 100%;
    overflow-y: auto;
}
</style>

<div class="entirePage">
    <MudContainer Class="pa-4" Style="max-width: 100%;">
        <div class="d-flex justify-space-between align-center page-title">
            <MudText Typo="Typo.h4" class="mt-7">Roles</MudText>
            <MudTooltip Text="Add Role" Arrow="true" Placement="Placement.Left">
                <MudIconButton Icon="@Icons.Material.Filled.Add" 
                              Variant="Variant.Filled" 
                              Color="Color.Error" 
                              Size="Size.Medium" 
                              OnClick="AddRole" />
            </MudTooltip>
        </div>
    </MudContainer>

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-3" Class="main-tabs swipeable-tabs" Centered="true">
        <MudTabPanel Text="Roles Management">
            <div class="tab-content-container">
                <MudTable class="rolesTable" Items="@_roles.roles" Filter="new Func<Web.Role, bool>(FilterFunc1)" MultiSelection="true"
                          @bind-SelectedItems="_selectedItems" Hover="true" FixedHeader="true">
                    <ToolBarContent>
                        <MudTextField @bind-Value="searchString1" 
                                    Placeholder="Search roles" 
                                    Adornment="Adornment.Start"
                                    AdornmentIcon="@Icons.Material.Filled.Search" 
                                    IconSize="Size.Medium" 
                                    Class="mt-0 mb-4 search-field"
                                    Immediate="true"
                                    DebounceInterval="300"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh Style="width: 50px;">
                            <MudTableHeaderCheckbox T="Web.Role" />
                        </MudTh>
                        <MudTh Class="role-name-cell">Role Name</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd Style="width: 50px;">
                            <MudTableCheckbox T="Web.Role" Value="context" />
                        </MudTd>
                        <MudTd DataLabel="Role Name" Class="role-name-cell">
                            <MudTextField Value="@context.Name" ReadOnly="false" Class="mt-0 mb-0" />
                        </MudTd>
                        <MudTd DataLabel="Actions">
                            <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                                <MudButton StartIcon="@Icons.Material.Filled.ContentCopy" 
                                          OnClick="() => CloneRole(context)"
                                          Size="Size.Small">Clone</MudButton>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                             Color="Color.Error"
                                             Size="Size.Small"
                                             OnClick="() => RemoveRole(context)" />
                            </MudButtonGroup>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <div class="d-flex align-center">
                            <MudTablePager />
                            <MudSpacer />
                        </div>
                    </PagerContent>
                </MudTable>
            </div>
        </MudTabPanel>
        
        @* Temporarily commented out endpoints tab
        <MudTabPanel Text="Selected Endpoints">
            <div class="tab-content-container">
                @if (!_roleEndpoints.Any())
                {
                    <div class="empty-selection">
                        <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Large" Class="mb-2" />
                        <MudText Typo="Typo.h6">No endpoint selections available</MudText>
                        <MudText Typo="Typo.body2" Class="mt-2">
                            Select a role and click "Add Group" to assign endpoints.
                        </MudText>
                    </div>
                }
                else
                {
                    <div class="endpoint-selection-container">
                        @foreach (var roleEndpoints in _roleEndpoints)
                        {
                            <MudPaper Elevation="2" Class="pa-4 mt-4">
                                <MudText Typo="Typo.h6" GutterBottom="true" Class="mb-2">
                                    Selected Endpoints for Role: @roleEndpoints.Key
                                </MudText>
                                <MudTable Items="@roleEndpoints.Value" Dense="true" Hover="false" ReadOnly="true" FixedHeader="true">
                                    <ColGroup>
                                        <col style="width: 50px;" />
                                        <col />
                                    </ColGroup>
                                    <RowTemplate>
                                        <MudTd>
                                            <MudIcon Icon="@Icons.Material.Filled.Link" />
                                        </MudTd>
                                        <MudTd DataLabel="Endpoint">@context</MudTd>
                                    </RowTemplate>
                                    <NoRecordsContent>
                                        <div class="empty-selection">
                                            <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Medium" Class="mb-2" />
                                            <MudText Typo="Typo.body1">No endpoints assigned to this role</MudText>
                                        </div>
                                    </NoRecordsContent>
                                </MudTable>
                            </MudPaper>
                        }
                    </div>
                }
            </div>
        </MudTabPanel>
        *@
    </MudTabs>
</div>

@* Temporarily commented out endpoint dialog
@if (_isOpen)
{
    <MudOverlay Visible="_isOpen" DarkBackground="true" AutoClose="false">
        <MudPaper Elevation="24" Class="pa-4 compact-dialog">
            <div class="d-flex justify-space-between align-center mb-2">
                <div>
                    <MudText Typo="Typo.h5">Endpoint Management</MudText>
                    <MudText Typo="Typo.subtitle1" Color="Color.Primary">Role: @_currentRole</MudText>
                </div>
                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="CloseDialog" />
            </div>
            
            <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-0" Class="swipeable-tabs" Centered="true">
                @foreach (var module in _endpointsForRoles.Modules)
                {
                    <MudTabPanel Text="@module.Name" Style="padding: 0">
                        <MudPaper Elevation="0" Class="endpoint-paper">
                            <MudTable Items="@module.Endpoints" Dense="true" Hover="true" Class="endpoint-table"
                                     Elevation="0" Style="background-color: white;" MultiSelection="true"
                                     @bind-SelectedItems="_selectedEndpoints">
                                <HeaderContent>
                                    <MudTh Style="width: 80px;">
                                        <MudTableHeaderCheckbox T="Web.Endpoint" />
                                    </MudTh>
                                    <MudTh>Name</MudTh>
                                    <MudTh>Description</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd Style="width: 80px;">
                                        <MudTableCheckbox T="Web.Endpoint" Value="context" />
                                    </MudTd>
                                    <MudTd>@context.Name</MudTd>
                                    <MudTd>@context.Description</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudPaper>
                    </MudTabPanel>
                }
            </MudTabs>

            <MudDivider DividerType="DividerType.Middle" Class="my-3"/>

            <div class="d-flex justify-end gap-2">
                <MudButton Color="Color.Error" 
                          Variant="Variant.Filled" 
                          StartIcon="@Icons.Material.Filled.Close" 
                          OnClick="CloseDialog">Close</MudButton>
                      
                <MudButton Color="Color.Primary" 
                          Variant="Variant.Filled" 
                          StartIcon="@Icons.Material.Filled.Save" 
                          OnClick="SaveAndClose"
                          Disabled="@(!HasSelectedEndpoints())">Save Selection</MudButton>
            </div>
        </MudPaper>
    </MudOverlay>
}
*@

@code {
    private string searchString1 = "";
    private bool _isOpen;
    private string _currentRole = "";
    private Dictionary<string, HashSet<string>> _roleEndpoints = new();
    private HashSet<Web.Role> _selectedItems = new();
    //private HashSet<Web.Endpoint> _selectedEndpoints = new();
    private Web.GetRolesInCompanyResponse _roles = new() { roles = new List<Web.Role>() };
    //private Web.GetEndpointsForRolesResponse _endpointsForRoles = new();

    [Parameter]
    public int CompanyId { get; set; }
    
    private int _currentUserId = 1; // Default to 1 for testing

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var rolesResult = await Http.GetFromJsonAsync<Web.GetRolesInCompanyResponse>($"api/company/getRolesInCompany?companyID={CompanyId}&userID={_currentUserId}");
            if (rolesResult != null)
            {
                _roles = rolesResult;
            }

            @* Temporarily commented out endpoint loading
            var endpointsResult = await Http.GetFromJsonAsync<Web.GetEndpointsForRolesResponse>($"api/endpoint/getEndpointsForRoles?companyID={CompanyId}");
            if (endpointsResult != null)
            {
                _endpointsForRoles = endpointsResult;
            }
            *@
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Snackbar.Add("Failed to load roles data", Severity.Error);
        }
    }

    private bool FilterFunc1(Web.Role element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Web.Role element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task AddRole()
    {
        try
        {
            var response = await Http.PostAsync($"api/company/createRole?userID={_currentUserId}&companyID={CompanyId}&name=New Role", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Role created successfully!", Severity.Success);
                await OnInitializedAsync();
            }
            else
            {
                Snackbar.Add("Failed to create role", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Snackbar.Add("Failed to create role", Severity.Error);
        }
    }

    private async Task RemoveRole(Web.Role role)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/company/deleteRole?userID={_currentUserId}&companyID={CompanyId}&roleID={role.RoleID}");
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Role removed successfully!", Severity.Success);
                await OnInitializedAsync();
            }
            else
            {
                Snackbar.Add("Failed to remove role", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Snackbar.Add("Failed to remove role", Severity.Error);
        }
    }

    private async Task CloneRole(Web.Role role)
    {
        try
        {
            var response = await Http.PostAsync($"api/company/createRole?userID={_currentUserId}&companyID={CompanyId}&name={role.Name}_Copy", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Role cloned successfully!", Severity.Success);
                await OnInitializedAsync();
            }
            else
            {
                Snackbar.Add("Failed to clone role", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Snackbar.Add("Failed to clone role", Severity.Error);
        }
    }

    @* Temporarily commented out endpoint-related methods
    private void OpenDialog() => _isOpen = true;
    private void CloseDialog() => _isOpen = false;

    private void AddEndpoint(Web.Role role) => OpenEndpointDialog(new[] { role });
    private void MakeChoicesForSelectedRoles() => OpenEndpointDialog(_selectedItems);

    private void OpenEndpointDialog(IEnumerable<Web.Role> roles)
    {
        if (!roles.Any()) return;

        _currentRole = string.Join(", ", roles.Select(r => r.Name));
        _selectedEndpoints.Clear();
        OpenDialog();
    }

    private bool HasSelectedEndpoints() => _selectedEndpoints.Any();

    private async Task SaveAndClose()
    {
        await SaveSelection();
        CloseDialog();
    }

    private async Task SaveSelection()
    {
        try
        {
            foreach (var role in _selectedItems)
            {
                foreach (var endpoint in _selectedEndpoints)
                {
                    var response = await Http.PostAsJsonAsync("api/endpoint/addEndpointToRole", new { roleID = role.RoleID, endpointID = endpoint.EndpointID });
                    if (!response.IsSuccessStatusCode)
                    {
                        Snackbar.Add($"Failed to add endpoint to role {role.Name}", Severity.Error);
                    }
                }
            }
            Snackbar.Add("Endpoints saved successfully!", Severity.Success);
            await OnInitializedAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Snackbar.Add("Failed to save endpoints", Severity.Error);
        }
    }
    *@
}
