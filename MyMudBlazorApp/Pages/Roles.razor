@page "/company/{companyID:int}/roles"

@using MudBlazor
@using MyMudBlazorApp.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using System.Net.Http.Json
@using MudBlazor.Extensions
@using Web = DatabaseHandler.Data.Models.Web.ResponseObjects;
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage


<style>

.mud-table th, .mud-table td {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    padding: 8px 16px;
    vertical-align: middle;
}

.rolesTable {
    width: 100%; 
    margin: 0 auto;
}

.search-field {
    margin-left: 16px;
}

.role-name-cell {
    min-width: 720px;
}

.actions-cell {
    display: flex;
    gap: 8px;
    align-items: center;
}

.page-title {
    margin-bottom: 10px;
    width: 90%;
    margin-left: auto;
    margin-right: auto;
}

.endpoint-table {
    margin-top: 0;
    border: 1px solid #e0e0e0;
    border-radius: 4px;
    max-height: fit-content;
}

.endpoint-paper {
    background-color: #fafafa;
    padding: 8px;
    margin-bottom: 0;
}

.module-title {
    font-weight: 500;
}


.mud-tabs-panels { 
    padding: 0;
}

.mud-tab-slider {
    background-color: var(--mud-palette-primary);
}

.swipeable-tabs .mud-tabs-toolbar {
    justify-content: center;
}

.swipeable-tabs .mud-tabs-panels {
    min-height: 0;
    padding: 0 !important;
}

.compact-dialog {
    width: 700px;
    max-width: 90vw;
    max-height: 80vh;
}

/* Styling for main content tabs */
.main-tabs {
    margin-top: 16px;
    width: 90%;
    margin-left: 95px;
    margin-right: auto;
}

.main-tabs .mud-tabs-panels {
    min-height: 500px; /* Set consistent height for all tab panels */
    overflow-y: auto; /* Add scrolling to the tab panels instead of tables */
}

.empty-selection {
    padding: 32px;
    text-align: center;
    color: var(--mud-palette-text-secondary);
}

.entirePage {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

.tab-content-container {
    width: 100%;
    height: 100%;
}

.endpoint-selection-container {
    width: 100%;
    height: 100%;
    overflow-y: auto;
}

.companySideBar {
    width: 64px;
    height: calc(100vh - 64px);
    position: fixed;
    left: 0;
    top: 64px;
    padding: 16px 8px;
    background-color: #f0f0f0;
    display: flex;
    flex-direction: column;
    align-items: center;
    box-shadow: 2px 0 5px rgba(0,0,0,0.1);
    z-index: 1;
}

.mainContent {
    margin-left: 80px;
    padding: 20px;
}

.entirePage {
    background-color: white;
    min-height: 100vh;
    padding: 20px;
}

.tiny-button {
    font-size: 0.65rem;
    padding: 2px 6px;
    min-width: 0;
    height: 35px;
}

.tiny-icon-button {
    padding: 2px;
    font-size: 16px;
    min-width: 0;
    height: 35px;
}

</style>

<div class="companySideBar">
    <div class="sideBarButtons">
        <MudTooltip Text="Back" Placement="Placement.Right">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" OnClick="@(() => Navigation.NavigateTo($"/company/{companyId}"))" />
        </MudTooltip>
        <MudTooltip Text="Add Role" Placement="Placement.Right">
            <MudIconButton Icon="@Icons.Material.Filled.PersonAdd"
                           Color="Color.Primary"
                           OnClick="AddRole"/>
        </MudTooltip>

    </div>
</div>

<div class="entirePage">
    <div class="mainContent">
        <div class="d-flex align-center" style="gap: 10px;">
            <MudText Typo="Typo.h3" Style="color: black; margin-bottom: 3px;">Roles</MudText>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="d-flex justify-center mt-6">
            <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
        </div>
    }
    else
    {
        <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-3" Class="main-tabs swipeable-tabs" Centered="true" Style="background-color: transparent;">
            <MudTabPanel Text="Roles Management">
                <div class="tab-content-container">
                    <MudTable class="rolesTable" Style="border: 1px solid #ccc; border-radius: 8px;" Items="@RolesList" Filter="new Func<Web.Role, bool>(FilterFunc1)" MultiSelection="true"
                              @bind-SelectedItems="_selectedItems" Hover="true" FixedHeader="true">
                        <ToolBarContent>
                            <MudTextField @bind-Value="searchString1" 
                                        Placeholder="Search roles" 
                                        Adornment="Adornment.Start"
                                        AdornmentIcon="@Icons.Material.Filled.Search" 
                                        IconSize="Size.Medium" 
                                        Class="mt-0 mb-4 search-field"
                                        Immediate="true"
                                        DebounceInterval="300"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh Style="width: 50px;">
                                <MudTableHeaderCheckbox T="Web.Role" />
                            </MudTh>
                            <MudTh Class="role-name-cell">Role Name</MudTh>
                            <MudTh>Actions</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd Style="width: 50px;">
                                <MudTableCheckbox T="Web.Role" Value="context" />
                            </MudTd>
                            <MudTd DataLabel="Role Name" Class="role-name-cell">
                                <MudTextField Value="@context.roleName" 
                                            ReadOnly="false" 
                                            Class="mt-0 mb-0"
                                            ValueChanged="@(async (string newName) => await UpdateRoleName(context, newName))"
                                            Immediate="false"
                                            OnKeyDown="@(async (KeyboardEventArgs e) => {
                                                if (e.Key == "Enter") {
                                                    await UpdateRoleName(context, context.roleName);
                                                }
                                            })"
                                            OnBlur="@(async () => await UpdateRoleName(context, context.roleName))" />
                            </MudTd>
                            <MudTd DataLabel="Actions">
                                <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
                                    <MudButton StartIcon="@Icons.Material.Filled.Add" 
                                              OnClick="() => ShowEndpointDialog(context)"
                                              Class="tiny-button">Add Endpoints</MudButton>
                                    <MudButton StartIcon="@Icons.Material.Filled.ContentCopy" 
                                              OnClick="() => CloneRole(context.roleName)"
                                              Class="tiny-button" >Clone</MudButton>
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                                 Color="Color.Error"
                                                Class="tiny-icon-button"
                                                 OnClick="() => RemoveRole(context.roleName)" />
                                </MudButtonGroup>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </div>
            </MudTabPanel>
        </MudTabs>
    }
</div>


@if (_isAddRoleOpen)
{
    <MudOverlay Visible="_isAddRoleOpen" DarkBackground="true" AutoClose="false">
        <MudPaper Elevation="24" Class="pa-4 compact-dialog">
            <div class="d-flex justify-space-between align-center mb-2">
                <div>
                    <MudText Typo="Typo.h5">Add New Role</MudText>
                    <MudText Typo="Typo.subtitle1" Color="Color.Primary">Company: @_companyName</MudText>
                </div>
                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="CloseAddRoleDialog" />
            </div>
            
            <MudPaper Elevation="0" Class="pa-4">
                <MudTextField @bind-Value="_newRoleName"
                            Label="Role Name"
                            Variant="Variant.Outlined"
                            FullWidth="true"
                            Class="mt-4"
                            Immediate="true"
                            Validation="@(new Func<string, IEnumerable<string>>(ValidateRoleName))" />
            </MudPaper>

            <MudDivider DividerType="DividerType.Middle" Class="my-3"/>

            <div class="d-flex justify-end gap-2">
                <MudButton Color="Color.Error" 
                          Variant="Variant.Filled" 
                          StartIcon="@Icons.Material.Filled.Close" 
                          OnClick="CloseAddRoleDialog">Cancel</MudButton>
                      
                <MudButton Color="Color.Primary" 
                          Variant="Variant.Filled" 
                          StartIcon="@Icons.Material.Filled.PersonAdd" 
                          OnClick="@(() => CreateRole(_newRoleName))"
                          Disabled="@(string.IsNullOrWhiteSpace(_newRoleName))">Add Role</MudButton>
            </div>
        </MudPaper>
    </MudOverlay>
}

@if (_addEndpointToCompanyOpen)
{
    <MudOverlay Visible="_addEndpointToCompanyOpen" DarkBackground="true" AutoClose="false">
        <MudPaper Elevation="24" Class="pa-4 compact-dialog">
            <div class="d-flex justify-space-between align-center mb-2">
                <div>
                    <MudText Typo="Typo.h5">Add Endpoints to Roles</MudText>
                </div>
                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="CloseEndpointCompanyDialog" />
            </div>
            
            <MudTable Items="Endpoints" Dense="true" MultiSelection="true" @bind-SelectedItems="selectedItems_" SelectOnRowClick="true">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Name</MudTd>
                </RowTemplate>
            </MudTable>

            <MudDivider DividerType="DividerType.Middle" Class="my-3"/>

            <div class="d-flex justify-end gap-2">
                <MudButton Color="Color.Error"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Close"
                           OnClick="CloseEndpointCompanyDialog">Cancel</MudButton>

                <MudButton Color="Color.Primary"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.PersonAdd"
                           OnClick="@(() => VerifyChangeInCompanyDialog())">
                    Confirm
                </MudButton>
            </div>
        </MudPaper>
    </MudOverlay>
}

@code {
    [Parameter]
    public int companyId { get; set; }
    private bool _isAddRoleOpen;
    private string _newRoleName = string.Empty;
    private string _companyName = string.Empty;

    private int currentUserID = 1; // You might get this from auth state
    private string searchString1 = "";
    private bool _isOpen;
    private string _currentRole = "";
    private Dictionary<string, HashSet<string>> _roleEndpoints = new();
    private List<Web.Role> RolesList = new List<Web.Role>();
    private HashSet<Web.Role> _selectedItems = new HashSet<Web.Role>();
    private HashSet<Endpoint> _selectedEsmaEndpoints = new();
    private HashSet<Endpoint> _selectedCalculationEndpoints = new();
    private bool isLoading = true;
    private bool _isAuthenticated = false;
    private bool _authChecked = false;

    private bool _addEndpointToCompanyOpen = false;
    private List<Web.LocalEndpoint> Endpoints = new ();
    private HashSet<Web.LocalEndpoint> selectedItems_ = new ();
    int roleID = 0;


    public class Endpoint
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public string Module { get; set; }
        public string Path { get; set; }
        public string Method { get; set; }
        public bool IsActive { get; set; }
    }

    private List<Endpoint> EsmaEndpoints = new()
    {
        new Endpoint { 
            Name = "Test ESMA Endpoint 1",
            Description = "Retrieves ESMA financial data",
            Module = "ESMA",
            Path = "/api/esma/financial-data",
            Method = "GET",
            IsActive = true
        },
        new Endpoint { 
            Name = "Test ESMA Endpoint 2",
            Description = "Updates ESMA market statistics",
            Module = "ESMA",
            Path = "/api/esma/market-stats",
            Method = "POST",
            IsActive = true
        },
        new Endpoint { 
            Name = "Test ESMA Endpoint 3",
            Description = "Fetches ESMA regulatory reports",
            Module = "ESMA",
            Path = "/api/esma/regulatory-reports",
            Method = "GET",
            IsActive = true
        }
    };

    private List<Endpoint> CalculationEndpoints = new()
    {
        new Endpoint { 
            Name = "Test Calculation Endpoint 1",
            Description = "Performs risk assessment calculations",
            Module = "Calculations",
            Path = "/api/calc/risk-assessment",
            Method = "POST",
            IsActive = true
        },
        new Endpoint { 
            Name = "Test Calculation Endpoint 2",
            Description = "Calculates market volatility metrics",
            Module = "Calculations",
            Path = "/api/calc/volatility",
            Method = "GET",
            IsActive = true
        },
        new Endpoint { 
            Name = "Test Calculation Endpoint 3",
            Description = "Generates performance analytics",
            Module = "Calculations",
            Path = "/api/calc/performance",
            Method = "GET",
            IsActive = true
        }
    };

    private IEnumerable<Endpoint> AllEndpoints => EsmaEndpoints.Concat(CalculationEndpoints);

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");

            if (string.IsNullOrEmpty(token))
            {
                _isAuthenticated = false;
                Snackbar.Add("You are not logged in", Severity.Warning);
                _authChecked = true;
                Navigation.NavigateTo("/login", forceLoad: true);
                return;
            }

            _isAuthenticated = true;
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            ConfigureSnackbar();
            LoadEndpoints();
            await LoadRoles();
        }
        catch (Exception ex)
        {
            _isAuthenticated = false;
            Snackbar.Add($"Authentication error!", Severity.Error);
            Navigation.NavigateTo("/login", forceLoad: true);
        }
        finally
        {
            _authChecked = true;
        }
    }


    private async Task LoadRoles()
    {
        try
        {
            isLoading = true;
            var result = await Http.GetFromJsonAsync<Web.GetRolesInCompanyResponse>($"api/company/getRolesInCompany?companyID={companyId}&showCustomerAdminRole={false}");
            
            if (result != null)
            {
                RolesList = result.roles;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading roles!", Severity.Error);
            Navigation.NavigateTo("/");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ConfigureSnackbar()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
        Snackbar.Configuration.SnackbarVariant = Variant.Filled;
        Snackbar.Configuration.ShowTransitionDuration = 200;
        Snackbar.Configuration.HideTransitionDuration = 200;
        Snackbar.Configuration.VisibleStateDuration = 2000;
    }

    private void OpenAddRoleDialog()
    {
        _newRoleName = string.Empty;
        _isAddRoleOpen = true;
        StateHasChanged();
    }

    private void CloseAddRoleDialog()
    {
        _isAddRoleOpen = false;
        _newRoleName = string.Empty;
        StateHasChanged();
    }

    private IEnumerable<string> ValidateRoleName(string roleName)
    {
        if (string.IsNullOrWhiteSpace(roleName))
            yield return "Role name is required";
    }

    private async Task AddRole()
    {
        OpenAddRoleDialog();
    }

    private async Task RemoveRole(string roleName)
    {
        var role = RolesList.FirstOrDefault(r => r.roleName == roleName);
        if (role != null)
        {
            try
            {
                var response = await Http.DeleteAsync($"http://localhost:5000/api/company/deleteRole?companyID={companyId}&roleID={role.roleID}");
                if (response.IsSuccessStatusCode)
                {
                    RolesList.Remove(role);
                    _roleEndpoints.Remove(roleName);
                    Snackbar.Add($"Role '{roleName}' deleted successfully!", Severity.Success);
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add("Failed to delete role", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting role!", Severity.Error);
            }
        }
    }

    private async Task CloneRole(string roleName)
    {
        var newRoleName = $"{roleName}_Copy";
        var roleToClone = RolesList.FirstOrDefault(r => r.roleName == roleName);
        
        if (roleToClone != null)
        {
            try
            {
                var response = await Http.PostAsync($"http://localhost:5000/api/company/createRole?companyID={companyId}&name={Uri.EscapeDataString(newRoleName)}", null);
                if (response.IsSuccessStatusCode)
                {
                    await LoadRoles(); // Refresh the roles list to get the new role
                    
                    // Copy the endpoints if they exist
                    if (_roleEndpoints.ContainsKey(roleName))
                    {
                        _roleEndpoints[newRoleName] = new HashSet<string>(_roleEndpoints[roleName]);
                    }
                    
                    Snackbar.Add($"Role '{newRoleName}' created successfully!", Severity.Success);
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add($"Failed to clone role '{roleName}'", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error cloning role!", Severity.Error);
            }
        }
    }

    private bool FilterFunc1(Web.Role role) => 
        string.IsNullOrWhiteSpace(searchString1) || 
        role.roleName.Contains(searchString1, StringComparison.OrdinalIgnoreCase);

    private void OpenDialog() => _isOpen = true;
    private void CloseDialog() => _isOpen = false;

    private void AddEndpoint(string role) => OpenEndpointDialog(new[] { role });
    private void MakeChoicesForSelectedRoles() => OpenEndpointDialog(_selectedItems.Select(r => r.roleName));

    private void OpenEndpointDialog(IEnumerable<string> roles)
    {
        if (!roles.Any()) return;

        _currentRole = string.Join(", ", roles);
        _selectedEsmaEndpoints.Clear();
        _selectedCalculationEndpoints.Clear();

        var commonEndpoints = GetCommonEndpoints(roles);
        
        PreSelectEndpoints(commonEndpoints);
        
        OpenDialog();
    }

    private HashSet<string> GetCommonEndpoints(IEnumerable<string> roles)
    {
        var rolesList = roles.ToList();
        if (!rolesList.Any()) return new HashSet<string>();

      
        var commonEndpoints = _roleEndpoints.TryGetValue(rolesList[0], out var firstRoleEndpoints)
            ? new HashSet<string>(firstRoleEndpoints)
            : new HashSet<string>();

        
        foreach (var role in rolesList.Skip(1))
        {
            if (_roleEndpoints.TryGetValue(role, out var roleEndpoints))
            {
                commonEndpoints.IntersectWith(roleEndpoints);
            }
            else
            {
                commonEndpoints.Clear();
                break;
            }
        }

        return commonEndpoints;
    }

    private void PreSelectEndpoints(HashSet<string> endpointNames)
    {
        if (endpointNames == null || !endpointNames.Any()) return;

        _selectedEsmaEndpoints = new HashSet<Endpoint>(
            EsmaEndpoints.Where(e => endpointNames.Contains(e.Name))
        );

        _selectedCalculationEndpoints = new HashSet<Endpoint>(
            CalculationEndpoints.Where(e => endpointNames.Contains(e.Name))
        );
    }

    private bool HasSelectedEndpoints() => 
        _selectedEsmaEndpoints.Any() || _selectedCalculationEndpoints.Any();

    private void SaveAndClose()
    {
        SaveSelection();
        CloseDialog();
    }

    private void SaveSelection()
    {
        var selectedEndpoints = _selectedEsmaEndpoints
            .Concat(_selectedCalculationEndpoints)
            .Select(e => e.Name)
            .ToHashSet();

        if (selectedEndpoints.Any())
        {
            foreach (var role in _currentRole.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries))
            {
                _roleEndpoints[role] = selectedEndpoints;
            }
            ShowSuccessMessage();
        }
        else
        {
            foreach (var role in _currentRole.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries))
            {
                _roleEndpoints.Remove(role);
            }
            ShowWarningMessage();
        }
    }
    

    private async Task CreateRole(string roleName)
    {
        if (string.IsNullOrWhiteSpace(roleName))
        {
            Snackbar.Add("Role name cannot be empty.", Severity.Warning);
            return;
        }

        try
        {
            var response = await Http.PostAsync($"/api/company/createRole?companyID={companyId}&name={Uri.EscapeDataString(roleName)}", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add($"Role '{roleName}' created successfully!", Severity.Success);
                CloseAddRoleDialog();
                await LoadRoles();
            }
            else
            {
                Snackbar.Add($"Failed to create role '{roleName}'", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating role!", Severity.Error);
        }
    }

    private void SaveEndpointsToRoles(HashSet<string> endpoints)
    {
        foreach (var role in _selectedItems)
        {
            _roleEndpoints[role.roleName] = endpoints;
        }
    }

    private void RemoveEndpointsFromRoles()
    {
        foreach (var role in _selectedItems)
        {
            _roleEndpoints.Remove(role.roleName);
        }
    }

    private void ShowSuccessMessage() =>
        ShowSnackbar($"Endpoints saved successfully for roles: {_currentRole}!", Severity.Info);

    private void ShowWarningMessage() =>
        ShowSnackbar("Please select at least one endpoint", Severity.Warning);

    private void ShowSnackbar(string message, Severity severity)
    {
        Snackbar.Add(message, severity, config =>
        {
            config.ShowCloseIcon = true;
            config.Action = "Dismiss";
            config.ActionColor = Color.Surface;
        });
    }

    private async Task UpdateRoleName(Web.Role role, string newName)
    {
        if (string.IsNullOrWhiteSpace(newName) || role.roleName == newName)
            return;

        try
        {
            var response = await Http.PutAsync($"http://localhost:5000/api/company/updateRoles?&roleID={role.roleID}&companyID={companyId}&name={Uri.EscapeDataString(newName)}", null);
            if (response.IsSuccessStatusCode)
            {
                role.roleName = newName;
                // Update the endpoints dictionary key if it exists
                if (_roleEndpoints.ContainsKey(role.roleName))
                {
                    var endpoints = _roleEndpoints[role.roleName];
                    _roleEndpoints.Remove(role.roleName);
                    _roleEndpoints[newName] = endpoints;
                }
                Snackbar.Add($"Role name updated to '{newName}'", Severity.Success);
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Failed to update role name", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating role name!", Severity.Error);
        }
    }
    
    private void ShowEndpointDialog(Web.Role role)
    {
        roleID = role.roleID;
        selectedItems_.Clear();
        updateAddedToCompanies();
        _addEndpointToCompanyOpen = true;
        StateHasChanged();
    }
    
    public void CloseEndpointCompanyDialog()
    {
        _addEndpointToCompanyOpen = false;
        StateHasChanged();
    }

    public void VerifyChangeInCompanyDialog()
    {
        foreach (var endpoint in selectedItems_)
        {
            foreach (var localEndpoint in Endpoints)
            {
                if (localEndpoint.endpointID == endpoint.endpointID)
                {
                    localEndpoint.isSelected = true;
                    break;
                }
            }
        }
        _addEndpointToCompanyOpen = false;
        AddCompaniesToEndpoint();
        StateHasChanged();
    }
    
    private async void AddCompaniesToEndpoint()
    {
        try
        {
            var result = await Http.PostAsJsonAsync($"api/endpoint/setRoleState?roleID={roleID}",Endpoints);
            if (result.IsSuccessStatusCode)
            {
            }
            else
            {
                Snackbar.Add($"Error posting selected endpoint data{result.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error posting selected endpoint data: {ex.Message}", Severity.Error);
        }
    }
    
    private async void updateAddedToCompanies()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<int>>($"api/endpoint/getEndpointsForRole?roleID={roleID}");
            var list = response.As<List<int>>() ?? new List<int>();
            foreach (var endpoint in Endpoints)
            {
                if (list.Contains(endpoint.endpointID))
                {
                    selectedItems_.Add(endpoint);
                    endpoint.isSelected = true;
                }
                else
                {
                    endpoint.isSelected = false;
                }
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding endpoint: {ex.Message}", Severity.Error);
        }
    }
    
    private async void LoadEndpoints()
    {
        try
        {
            Endpoints.Clear();
            var result = await Http.GetFromJsonAsync<List<Web.LocalEndpoint>>($"api/endpoint/getAllCompanyEndpoints?companyID={companyId}");
            if (result != null)
            {
                Endpoints = result;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading endpoint data: {ex.Message}", Severity.Error);
        }
    }
    
}
