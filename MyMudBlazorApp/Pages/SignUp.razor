@page "/signup"
@using MudBlazor
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using System.Net.Http
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject HttpClient Http

<style>
.signup-container {
    display: flex;
    height: 100vh;
    width: 100vw;
    margin: 0;
    padding: 0;
    overflow: hidden;
    position: fixed;
    top: 0;
    left: 0;
}

.left-section {
    width: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    background: white;
    box-sizing: border-box;
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
}

.right-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    background: linear-gradient(to bottom, #392B77, #0E40F3);
    color: white;
    padding: 2rem;
    height: 100vh;
    width: 50%;
    box-sizing: border-box;
    position: absolute;
    right: 0;
    top: 0;
}

.signup-card {
    width: 100%;
    max-width: 400px;
    box-shadow: none;
}

.login-button {
    background: white;
    color: black;
    width: 120px;
}

.login-button:hover {
    background: white;
    color: black;
    border-color: black;
}
</style>

<div class="signup-container">
    <!-- Left Side - Sign Up Form -->
    <div class="left-section">
        <MudCard Class="signup-card">
            <MudCardContent>
                <MudText Typo="Typo.h4" Class="mb-4 text-center">Create Account</MudText>

                <EditForm Model="@signupModel" OnValidSubmit="HandleSignUp">
                    <DataAnnotationsValidator />
                    <MudTextField @bind-Value="signupModel.FullName"
                                  Label="Full Name"
                                  Variant="Variant.Filled"
                                  Class="mb-3"
                                  Required="true"
                                  RequiredError="Full name is required!"
                                  Immediate="true" />

                    <MudTextField @bind-Value="signupModel.Email"
                                  Label="Email"
                                  Variant="Variant.Filled"
                                  Class="mb-3"
                                  Required="true"
                                  RequiredError="Email is required!"
                                  Immediate="true" />

                    <MudTextField @bind-Value="signupModel.Password"
                                  Label="Password"
                                  Variant="Variant.Filled"
                                  InputType="@(showPassword ? InputType.Text : InputType.Password)"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@(showPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                  OnAdornmentClick="TogglePasswordVisibility"
                                  Class="mb-3"
                                  Required="true"
                                  RequiredError="Password is required!"
                                  Immediate="true" />

                    <MudTextField @bind-Value="signupModel.ConfirmPassword"
                                  Label="Confirm Password"
                                  Variant="Variant.Filled"
                                  InputType="@(showConfirmPassword ? InputType.Text : InputType.Password)"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@(showConfirmPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                                  OnAdornmentClick="ToggleConfirmPasswordVisibility"
                                  Class="mb-4"
                                  Required="true"
                                  RequiredError="Please confirm your password!"
                                  Immediate="true" />

                    <MudButton ButtonType="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true">
                        Sign Up
                    </MudButton>
                    <ValidationSummary />
                </EditForm>
            </MudCardContent>
        </MudCard>
    </div>

    <!-- Right Side - Login Section -->
    <div class="right-section">
        <MudText Typo="Typo.h3" Class="mb-2">Already Have an Account?</MudText>
        <MudText Typo="Typo.h5" Class="mb-4">Login to access your account and continue your journey</MudText>
        <MudButton Variant="Variant.Outlined"
                   Class="login-button"
                   OnClick="@(() => Navigation.NavigateTo("/login"))">
            Login
        </MudButton>
    </div>
</div>

@code {
    private SignupModel signupModel = new SignupModel();
    private bool showPassword;
    private bool showConfirmPassword;

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void ToggleConfirmPasswordVisibility()
    {
        showConfirmPassword = !showConfirmPassword;
    }

    private string GetFirstName() =>
        signupModel.FullName.Trim().Split(' ').FirstOrDefault() ?? "";

    private string GetLastName()
    {
        var parts = signupModel.FullName.Trim().Split(' ');
        return parts.Length > 1 ? string.Join(" ", parts.Skip(1)) : "";
    }

    private async Task HandleSignUp()
    {
        var url = $"api/user/register?userEmail={Uri.EscapeDataString(signupModel.Email)}&userPassword={Uri.EscapeDataString(signupModel.Password)}&firstName={Uri.EscapeDataString(GetFirstName())}&lastName={Uri.EscapeDataString(GetLastName())}";

        try
        {
            var response = await Http.PostAsync(url, null);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Registration successful! Please login.", Severity.Success);
                Navigation.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Registration failed: {error}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"An error occurred: {ex.Message}", Severity.Error);
        }
    }

    public class SignupModel
    {
        [Required(ErrorMessage = "Full name is required")]
        public string FullName { get; set; } = "";

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = "";
    }
}
