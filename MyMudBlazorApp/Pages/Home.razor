@page "/"
@using MudBlazor
@using DatabaseHandler.Data.Models.Web.ResponseObjects
@using MyMudBlazorApp.Services
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject HttpClient Http


<style>
    .companySideBar {
        width: 64px;
        height: calc(100vh - 64px);
        position: fixed;
        left: 0;
        top: 64px;
        padding: 16px 8px;
        background-color: #f0f0f0;
        display: flex;
        flex-direction: column;
        align-items: center;
        box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        z-index: 1;
    }

    .mainContent {
        margin-left: 80px;
        padding: 20px;
        padding-top: 84px;
    }

    .entirePage {
        background-color: white;
        min-height: 100vh;
        padding: 20px;
    }

    .page-title {
        margin-bottom: 16px;
    }
</style>

<div class="companySideBar">
    <div class="sideBarButtons">
        <MudTooltip Text="Back" Placement="Placement.Right">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" OnClick="@(() => Navigation.NavigateTo("/"))" />
        </MudTooltip>
    </div>
</div>

<div class="entirePage">
    <div class="mainContent">
        <div class="d-flex justify-space-between align-center mb-10 page-title">
            <MudText Typo="Typo.h3" Style="color: black;">Companies</MudText>
            <MudTextField @bind-Value="searchString" 
                        Placeholder="Search" 
                        Adornment="Adornment.Start" 
                        AdornmentIcon="@Icons.Material.Filled.Search" 
                        IconSize="Size.Medium" 
                        Class="mt-0"
                        Style="width: 200px; margin-left: auto;" />
        </div>

        <MudGrid Spacing="8">
            @foreach (var company in FilteredCompanies)
            {
                <MudItem xs="12" sm="6" lg="4" Class="mb-10">
                    <MudCard Elevation="2" Style="height: 100%;">
                        <MudCardContent Class="pa-7">
                            <div class="d-flex justify-space-between align-center">
                                <MudText Typo="Typo.h6">@company.companyName</MudText>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => NavigateToCompany(company.companyID))">View Details</MudButton>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>

        <div class="pt-12 d-flex justify-center w-100 mb-10">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenCreateCompanyDialog">
                Create Company
            </MudButton>
        </div>
    </div>
</div>

<MudDialog @bind-IsVisible="createCompanyDialog" 
          Options="dialogOptions"
          Class="pa-4"
          MaxWidth="MaxWidth.Small"
          FullWidth="true">
    <TitleContent>
        <MudText Typo="Typo.h6" Class="d-flex align-center">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-2" />
            Create New Company
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="newCompanyName" 
                      Label="Company Name" 
                      Required="true" 
                      RequiredError="Company name is required!"
                      Variant="Variant.Outlined"
                      FullWidth="true"
                      Class="mt-4" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" 
                  Variant="Variant.Text"
                  Color="Color.Default">
            Cancel
        </MudButton>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="CreateCompany">
            Create
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<GetAllCompaniesResponse> Companies { get; set; } = new();
    private string searchString = "";
    private bool createCompanyDialog;
    private string newCompanyName = "";

    private DialogOptions dialogOptions = new DialogOptions
    {
        MaxWidth = MaxWidth.Small,
        FullWidth = true,
        CloseOnEscapeKey = true,
        Position = DialogPosition.Center,
        CloseButton = true,
        NoHeader = false
    };

    private List<GetAllCompaniesResponse> FilteredCompanies => 
        Companies.Where(c => FilterFunc(c)).ToList();

    private bool FilterFunc(GetAllCompaniesResponse company)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (company.companyName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCompanies();
    }

    private async Task LoadCompanies()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<List<GetAllCompaniesResponse>>("/api/company/get?userID=1");
            if (result != null)
            {
                Companies = result;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Snackbar.Add("Failed to load companies", Severity.Error);
        }
    }

    private void OpenCreateCompanyDialog()
    {
        createCompanyDialog = true;
    }

    private void Cancel()
    {
        createCompanyDialog = false;
        newCompanyName = "";
    }

    private async Task CreateCompany()
    {
        if (string.IsNullOrWhiteSpace(newCompanyName))
        {
            Snackbar.Add("Please enter a company name", Severity.Warning);
            return;
        }

        try
        {
            var payload = new { userID = 1, companyName = newCompanyName };
            var response = await Http.PostAsJsonAsync("api/company/createCompany", payload);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<CreateCompanyResponse>();
                if (result != null)
                {
                    Snackbar.Add("Company created successfully!", Severity.Success);
                    createCompanyDialog = false;
                    newCompanyName = "";
                    await LoadCompanies();
                }
                else
                {
                    Snackbar.Add("Failed to parse response", Severity.Error);
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error response: {errorContent}");
                Snackbar.Add($"Failed to create company: {response.StatusCode}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating company: {ex.Message}");
            Snackbar.Add($"Failed to create company: {ex.Message}", Severity.Error);
        }
    }

    private void NavigateToCompany(int companyID)
    {
        Navigation.NavigateTo($"/company/{companyID}");
    }
}