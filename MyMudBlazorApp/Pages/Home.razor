@page "/"
@using MudBlazor
@using DatabaseHandler.Data.Models.Web.ResponseObjects
@using MyMudBlazorApp.Services
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject HttpClient Http

<MudMainContent>
    <div class="mx-auto px-8">
        <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-20 px-4">
            <div class="flex flex-col items-center">
                <div class="w-full">
                    <div class="d-flex justify-space-between align-center mb-10">
                        <MudText Typo="Typo.h3">Companies</MudText>
                        <MudTextField @bind-Value="searchString" Style="width: 15rem; margin-left: auto;" Placeholder="Search Companies" Variant="Variant.Outlined" />
                    </div>

                    <MudGrid Spacing="8">
                        @foreach (var company in Companies)
                        {
                            <MudItem xs="12" sm="6" lg="4" Class="mb-10">
                                <MudCard Elevation="2" Style="height: 100%;">
                                    <MudCardContent Class="pa-7">
                                        <div class="d-flex justify-space-between align-center">
                                            <MudText Typo="Typo.h6">@company.companyName</MudText>
                                            <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => NavigateToCompany(company.companyId))">View Details</MudButton>
                                        </div>
                                    </MudCardContent>
                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                </div>

                <div class="pt-12 d-flex justify-center w-100 mb-10">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenCreateCompanyDialog">
                        Create Company
                    </MudButton>
                </div>
            </div>
        </MudContainer>
    </div>
</MudMainContent>

<MudDialog @bind-IsVisible="createCompanyDialog">
    <DialogContent>
        <MudTextField @bind-Value="newCompanyName" Label="Company Name" Required="true" RequiredError="Company name is required!" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="CreateCompany">Create</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<GetAllCompaniesResponse> Companies { get; set; } = new();
    private string searchString = "";
    private bool createCompanyDialog;
    private string newCompanyName = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadCompanies();
    }

    private async Task LoadCompanies()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<List<GetAllCompaniesResponse>>("/api/company/get?userID=1");
            if (result != null)
            {
                Companies = result;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Snackbar.Add("Failed to load companies", Severity.Error);
        }
    }

    private void OpenCreateCompanyDialog()
    {
        createCompanyDialog = true;
    }

    private void Cancel()
    {
        createCompanyDialog = false;
        newCompanyName = "";
    }

    private async Task CreateCompany()
    {
        if (string.IsNullOrWhiteSpace(newCompanyName))
        {
            Snackbar.Add("Please enter a company name", Severity.Warning);
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("api/company/createCompany", new { userID = 1, companyName = newCompanyName });
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<CreateCompanyResponse>();
                if (result != null)
                {
                    Snackbar.Add("Company created successfully!", Severity.Success);
                    createCompanyDialog = false;
                    newCompanyName = "";
                    await LoadCompanies();
                }
            }
            else
            {
                Snackbar.Add("Failed to create company", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Snackbar.Add("Failed to create company", Severity.Error);
        }
    }

    private void NavigateToCompany(int companyId)
    {
        Navigation.NavigateTo($"/company/{companyId}");
    }
}

