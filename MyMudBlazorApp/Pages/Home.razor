@page "/"
@using MudBlazor
@using System.Net.Http.Json
@using DatabaseHandler.Data.Models.Web.ResponseObjects
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<style>
    .companySideBar {
        width: 64px;
        height: calc(100vh - 64px);
        position: fixed;
        left: 0;
        top: 64px;
        padding: 16px 8px;
        background-color: #f0f0f0;
        display: flex;
        flex-direction: column;
        align-items: center;
        box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        z-index: 1;
    }

    .mainContent {
        margin-left: 80px;
        padding: 20px;
    }

    .entirePage {
        background-color: white;
        min-height: 100vh;
        padding: 20px;
    }

    .page-title {
        margin-bottom: 16px;
    }

    .compact-dialog {
        width: 400px;
    }
</style>



<div class="entirePage">
    <div class="mainContent">
        <div class="d-flex justify-space-between align-center mb-10 page-title">
            <MudText Typo="Typo.h3" Style="color: black;">Companies</MudText>
            <MudTextField @bind-Value="searchString" 
                          Placeholder="Search" 
                          Adornment="Adornment.Start" 
                          AdornmentIcon="@Icons.Material.Filled.Search" 
                          IconSize="Size.Medium" 
                          Class="mt-0"
                          Style="width: 200px; margin-left: auto;" />
        </div>

        <MudGrid Spacing="8">
            @foreach (var company in FilteredCompanies)
            {
                <MudItem xs="12" sm="6" lg="4" Class="mb-10">
                    <MudCard Elevation="2" Style="height: 100%;">
                        <MudCardContent Class="pa-7">
                            <div class="d-flex justify-space-between align-center">
                                <MudText Typo="Typo.h6">@company.companyName</MudText>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => NavigateToCompany(company.companyID))">View Details</MudButton>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>

        <div class="pt-12 d-flex justify-center w-100 mb-10">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenCreateCompanyDialog">
                Create Company
            </MudButton>
        </div>
    </div>
</div>

@if (_isCreateCompanyOpen)
{
    <MudOverlay Visible="_isCreateCompanyOpen" DarkBackground="true" AutoClose="false">
        <MudPaper Elevation="24" Class="pa-4 compact-dialog">
            <div class="d-flex justify-space-between align-center mb-2">
                <MudText Typo="Typo.h5">Create New Company</MudText>
                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="CloseCreateCompanyDialog" />
            </div>

            <MudTextField @bind-Value="_newCompanyName"
                          Label="Company Name"
                          Required="true"
                          RequiredError="Company name is required!"
                          Variant="Variant.Outlined"
                          FullWidth="true"
                          Class="mt-4" 
                        Immediate="true"/>

            <div class="d-flex justify-end gap-2 mt-6">
                <MudButton Variant="Variant.Text" Color="Color.Default" OnClick="CloseCreateCompanyDialog">Cancel</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateCompany" Disabled="@string.IsNullOrWhiteSpace(_newCompanyName)">Create</MudButton>
            </div>
        </MudPaper>
    </MudOverlay>
}

@code {
    private List<GetAllCompaniesResponse> Companies { get; set; } = new();
    private string searchString = "";

    private bool _isCreateCompanyOpen = false;
    private string _newCompanyName = "";

    private List<GetAllCompaniesResponse> FilteredCompanies =>
        Companies.Where(c => string.IsNullOrWhiteSpace(searchString) || c.companyName.Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");

        if (string.IsNullOrEmpty(token))
        {
            Snackbar.Add("You are not logged in", Severity.Warning);
            Navigation.NavigateTo("/login");
            return;
        }

        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        await LoadCompanies();
    }

    private async Task LoadCompanies()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<List<GetAllCompaniesResponse>>("/api/company/get");
            if (result != null)
                Companies = result;
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to load companies", Severity.Error);
            Console.WriteLine(ex.Message);
        }
    }

    private void OpenCreateCompanyDialog()
    {
        _newCompanyName = "";
        _isCreateCompanyOpen = true;
    }

    private void CloseCreateCompanyDialog()
    {
        _isCreateCompanyOpen = false;
    }

    private async Task CreateCompany()
    {
        if (string.IsNullOrWhiteSpace(_newCompanyName))
        {
            Snackbar.Add("Please enter a company name", Severity.Warning);
            return;
        }

        try
        {
            var payload = new { companyName = _newCompanyName };
            var response = await Http.PostAsJsonAsync("api/company/createCompany", payload);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Company created successfully!", Severity.Success);
                _isCreateCompanyOpen = false;
                await LoadCompanies();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error response: {errorContent}");
                Snackbar.Add($"Failed to create company: {response.StatusCode}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to create company: {ex.Message}", Severity.Error);
        }
    }

    private void NavigateToCompany(int companyID)
    {
        Navigation.NavigateTo($"/company/{companyID}");
    }
}
