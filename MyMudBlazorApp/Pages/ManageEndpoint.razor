@page "/manageEndpoints"
@using System.Net.Http.Json
@using Web = DatabaseHandler.Data.Models.Web.ResponseObjects;
@using DatabaseHandler.Data.Models.Web.ResponseObjects;
@using MudBlazor.Extensions
@using MyMudBlazorApp.Services
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage



<PageTitle>"Manage Endpoints"</PageTitle>

<style>
    .companySideBar {
        width: 64px;
        height: calc(100vh - 64px);
        position: fixed;
        left: 0;
        top: 64px;
        padding: 16px 8px;
        background-color: #f0f0f0;
        display: flex;
        flex-direction: column;
        align-items: center;
        box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        z-index: 1;
    }

    .mainContent {
        margin-left: 80px;
        padding: 20px;
        padding-top: 84px;
    }

    .entirePage {
        background-color: white;
        min-height: 100vh;
        padding: 20px;
    }

    .companyTable {
        background-color: white;
        border-radius: 8px;
    }

    .sideBarButtons {
        margin-top: 16px;
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 16px;
    }

    .deleteCompanyButton {
        margin-top: auto;
        margin-bottom: 16px;
    }

    .companyTitle {
        display: flex;
        align-items: center;
    }

        .companyTitle h1 {
            margin: 0;
            padding: 0;
        }

    .mud-table th, .mud-table td {
        width: 200px;
        min-width: 200px;
        max-width: 200px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .mud-overlay {
        z-index: 1300 !important;
    }

    .mud-dialog {
        z-index: 1301 !important;
    }
</style>

<div class="companySideBar">
    <div class="sideBarButtons">
        <MudTooltip Text="Back" Placement="Placement.Right">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" OnClick="@(() => Navigation.NavigateTo("/"))" />
        </MudTooltip>
        

        <MudTooltip Text="Add Endpoint" Placement="Placement.Right">
            <MudIconButton Icon="@Icons.Material.Filled.Add"
                           Color="Color.Primary"
                           OnClick="@(() => OpenAddUserDialog())" />
        </MudTooltip>
    </div>
</div>

<div class="entirePage">
    <div class="mainContent">
        <div class="companyTitle mb-10">
            <div style="display: flex; align-items: center; gap: 10px;">
                <MudTextField
                            Placeholder="Manage Endpoints"
                            Disabled="@_isCompanyNameDisabled"
                            Class="mt-2"
                            Typo="Typo.h3"
                            Style="max-width: 500px; color: black;"
                            T="string"
                            Variant="Variant.Text" />
            </div>
        </div>

        <MudTable class="companyTable" Items="@_company" Filter="new Func<Web.EndpointResponse, bool>(FilterFunc)" MultiSelection="false" Hover="true">
            <ToolBarContent>
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" 
                                   Color="Color.Info" 
                                   aria-label="Add To Company" 
                                   Size="Size.Medium"
                                   OnClick="@(() => ShowCompaniesDialog(@context))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                   Color="Color.Warning"
                                   aria-label="Edit Endpoint"
                                   Size="Size.Medium"
                                   OnClick="@(() => OpenEndpointDialog(@context))"/>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" aria-label="Remove Role" Size="Size.Medium"
                                   OnClick="@(() => RemoveEndpoint(@context))"/>
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>
</div>

@if (_isAddUserOpen)
{
    <MudOverlay Visible="_isAddUserOpen" DarkBackground="true" AutoClose="false">
        <MudPaper Elevation="24" Class="pa-4 compact-dialog">
            <div class="d-flex justify-space-between align-center mb-2">
                <div>
                    <MudText Typo="Typo.h5">
                        @(okButtonString != "Verify Changes" ? "Create Endpoint" : "Update Endpoint")
                    </MudText>

                </div>
                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="CloseAddUserDialog" />
            </div>
            
            <MudPaper Elevation="1" Class="pa-6">
                <MudTextField @bind-Value="_newEndpointName"
                              Label="Endpoint Name"
                              Variant="Variant.Outlined"
                              FullWidth="true"
                              Class="mb-4"
                              Immediate="true" />

                <InputFile OnChange="HandleFileSelected" class="mb-4" />
                
            </MudPaper>

            <MudDivider DividerType="DividerType.Middle" Class="my-3"/>

            <div class="d-flex justify-end gap-2">
                <MudButton Color="Color.Error" 
                          Variant="Variant.Filled" 
                          StartIcon="@Icons.Material.Filled.Close" 
                          OnClick="CloseAddUserDialog">Cancel</MudButton>
                      
                <MudButton Color="Color.Primary"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.PersonAdd"
                           OnClick="@(() => CreateEndpoint())">
                    @okButtonString
                </MudButton>
            </div>
        </MudPaper>
    </MudOverlay>
}
@if (_addEndpointToCompanyOpen)
{
    <MudOverlay Visible="_addEndpointToCompanyOpen" DarkBackground="true" AutoClose="false">
        <MudPaper Elevation="24" Class="pa-4 compact-dialog">
            <div class="d-flex justify-space-between align-center mb-2">
                <div>
                    <MudText Typo="Typo.h5">Add to companies</MudText>
                </div>
                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="CloseEndpointCompanyDialog" />
            </div>
            
            <MudTable Items="companies" Dense="true" MultiSelection="true" @bind-SelectedItems="selectedItems_" SelectOnRowClick="true">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.company.CompanyName</MudTd>
                </RowTemplate>
            </MudTable>

            <MudDivider DividerType="DividerType.Middle" Class="my-3"/>

            <div class="d-flex justify-end gap-2">
                <MudButton Color="Color.Error"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Close"
                           OnClick="CloseEndpointCompanyDialog">Cancel</MudButton>

                <MudButton Color="Color.Primary"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.PersonAdd"
                           OnClick="@(() => VerifyChangeInCompanyDialog())">
                    Confirm
                </MudButton>
            </div>
        </MudPaper>
    </MudOverlay>
}


@code {
    
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null)
            return;

        using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10 MB max
        using var reader = new StreamReader(stream);
        _newEndpointSpec = await reader.ReadToEndAsync();
    }
    
    private EndpointResponse endpoint;
    private string _newEndpointName = string.Empty;
    private string _newEndpointSpec = string.Empty;
    private List<EndpointResponse> _company = new();
    private string searchString = "";
    private string _originalCompanyName = "";
    private bool _isCompanyNameDisabled = true;
    private bool _isAddUserOpen;
    private int pressedID;
    private string okButtonString = "Create Endpoint";
    private bool _addEndpointToCompanyOpen = false;
    private List<localCompany> companies = new ();
    private HashSet<localCompany> selectedItems_ = new ();
    private bool selectAll = false;

    private async void updateCompanies()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<DatabaseHandler.Data.Models.Database.Company>>($"api/company/getAllForEndpointPage");
            var list = response.As<List<DatabaseHandler.Data.Models.Database.Company>>() ?? new List<DatabaseHandler.Data.Models.Database.Company>();
            foreach (var thing in list)
            {
                companies.Add(new localCompany
                {
                    company = thing,
                    isSelected = false
                });
            }
        }
        catch (Exception e)
        {
            Snackbar.Add($"Error occured loading companies: {e.Message}",Severity.Error);
        }
    }
    
    private async void updateAddedToCompanies(int endpointID)
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<int>>($"api/endpoint/getCompanies?endpointID={endpoint.endpointID}");
            var list = response.As<List<int>>() ?? new List<int>();
            foreach (var company in companies)
            {
                if (list.Contains(company.company.CompanyID))
                {
                    selectedItems_.Add(company);
                    company.isSelected = true;
                }
                else
                {
                    company.isSelected = false;
                }
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding endpoint: {ex.Message}", Severity.Error);
        }
    }

    private DialogOptions dialogOptions = new DialogOptions
    {
        MaxWidth = MaxWidth.Small,
        FullWidth = true,
        CloseOnEscapeKey = true,
        Position = DialogPosition.Center,
        CloseButton = true,
        NoHeader = false
    };

    private void OpenEndpointDialog(EndpointResponse endpoint)
    {
        this.endpoint = endpoint;
        _newEndpointName = endpoint.Name;
        _newEndpointSpec = endpoint.Spec;
        okButtonString = "Verify Changes";
        OpenBulkRolesDialog();
    }

    private async Task OpenBulkRolesDialog()
    {
        _isAddUserOpen = true;
        StateHasChanged();
    }



    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrEmpty(token))
        {
            Snackbar.Add("You are not logged in", Severity.Warning);
            Navigation.NavigateTo("/login");
            return;
        }

        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        await LoadEndpoints();
        updateCompanies();
    }

    private bool FilterFunc(EndpointResponse endpoint)
    {
        return true;
        /*
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (user.userName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        
        return false;
        */
    }



    private async Task CreateEndpoint()
    {
        if (okButtonString == "Verify Changes")
        {
            UpdateEndpoint(endpoint.endpointID);
            return;
        }

        try
        {
            var localEndpoint = new EndpointResponse
            {
                Name = _newEndpointName,
                Spec = _newEndpointSpec
            };
            Console.WriteLine(localEndpoint);
            var response = await Http.PostAsJsonAsync($"http://localhost:5000/api/endpoint/createEndpoint",localEndpoint);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Endpoint added successfully!", Severity.Success);
                await LoadEndpoints();
            }
            else
            {
                Snackbar.Add("Failed to add endpoint", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding endpoint: {ex.Message}", Severity.Error);
        }

        CloseAddUserDialog();
        await LoadEndpoints();
    }

    private async Task UpdateEndpoint(int id)
    {
        try
        {
            var localEndpoint = new EndpointResponse()
            {
                endpointID = endpoint.endpointID,
                Name = _newEndpointName,
                Spec = _newEndpointSpec
            };
            var response = await Http.PostAsJsonAsync($"http://localhost:5000/api/endpoint/updateEndpoint",localEndpoint);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Endpoint updated successfully!", Severity.Success);
                await LoadEndpoints();
            }
            else
            {
                Snackbar.Add("Failed to update endpoint", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating endpoint: {ex.Message}", Severity.Error);
        }

        CloseAddUserDialog();
    }

    private async Task RemoveEndpoint(EndpointResponse endpoint)
    {
        try
        {
            var response = await Http.DeleteAsync($"http://localhost:5000/api/endpoint/deleteEndpoint?endpointID={endpoint.endpointID}");
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Endpoint removed successfully!", Severity.Success);
                await LoadEndpoints();
            }
            else
            {
                Snackbar.Add("Failed to remove endpoint", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error removing endpoint: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadEndpoints()
    {
        try
        {
            _company.Clear();
            var result = await Http.GetFromJsonAsync<List<EndpointResponse>>($"api/endpoint/getAll");
            if (result != null)
            {
                _company = result;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading endpoint data: {ex.Message}", Severity.Error);
        }
    }

    private void OpenAddUserDialog()
    {
        _newEndpointName = string.Empty;
        _newEndpointSpec = string.Empty;
        okButtonString = "Create Endpoint";
        _isAddUserOpen = true;
        StateHasChanged();
    }

    private void CloseAddUserDialog()
    {
        _newEndpointName = String.Empty;
        _newEndpointSpec = string.Empty;
        _isAddUserOpen = false;
        StateHasChanged();
    }

    private void ShowCompaniesDialog(EndpointResponse endpoint)
    {
        this.endpoint = endpoint;
        selectedItems_.Clear();
        updateAddedToCompanies(endpoint.endpointID);
        _addEndpointToCompanyOpen = true;
        StateHasChanged();
    }
    
    public void CloseEndpointCompanyDialog()
    {
        _addEndpointToCompanyOpen = false;
        StateHasChanged();
    }

    public void VerifyChangeInCompanyDialog()
    {
        foreach (var company in selectedItems_)
        {
            foreach (var localComapny in companies)
            {
                if (localComapny.company.CompanyID == company.company.CompanyID)
                {
                    company.isSelected = true;
                }
            }
        }
        _addEndpointToCompanyOpen = false;
        AddCompaniesToEndpoint();
        StateHasChanged();
    }


    private async void AddCompaniesToEndpoint()
    {
        try
        {
            var result = await Http.PostAsJsonAsync($"api/endpoint/setCompanyState?endpointID={endpoint.endpointID}",companies);
            if (result.IsSuccessStatusCode)
            {
            }
            else
            {
                Snackbar.Add($"Error posting selected company data{result.ReasonPhrase}");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error posting selected company data: {ex.Message}", Severity.Error);
        }
    }
    

}

