@page "/login"
@using MudBlazor
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using System.Net.Http.Headers
@using System.Net.Http.Json
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<style>
.login-container {
    display: flex;
    height: 100vh;
    width: 100vw;
    margin: 0;
    padding: 0;
    overflow: hidden;
    position: fixed;
    top: 0;
    left: 0;
}
.left-section {
    width: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    background: white;
    box-sizing: border-box;
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
}
.right-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    background: linear-gradient(to bottom, #392B77, #0E40F3);
    color: white;
    padding: 2rem;
    height: 100vh;
    width: 50%;
    box-sizing: border-box;
    position: absolute;
    right: 0;
    top: 0;
}
.login-card {
    width: 100%;
    max-width: 400px;
    box-shadow: none;
}
.sign-up-button {
    background: white;
    color: black;
    width: 120px;
}
.sign-up-button:hover {
    background: white;
    color: black;
    border-color: black;
}
</style>

<div class="login-container">
    <div class="left-section">
        <MudCard Class="login-card">
            <MudCardContent>
                <MudText Typo="Typo.h4" Class="mb-4 text-center">Login to Your Account</MudText>

                <MudTextField @bind-Value="email"
                              Label="Email"
                              Variant="Variant.Filled"
                              Class="mb-3"
                              Required="true"
                              RequiredError="Email is required!"
                              Immediate="true" />

                <MudTextField @bind-Value="password"
                              Label="Password"
                              Variant="Variant.Filled"
                              InputType="@(showPassword ? InputType.Text : InputType.Password)"
                              Adornment="Adornment.End"
                              AdornmentIcon="@(showPassword ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
                              OnAdornmentClick="TogglePasswordVisibility"
                              Class="mb-4"
                              Required="true"
                              RequiredError="Password is required!"
                              Immediate="true" />

                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           FullWidth="true"
                           OnClick="HandleLogin"
                           Disabled="@(!IsValidForm())">
                    Sign In
                </MudButton>
            </MudCardContent>
        </MudCard>
    </div>

    <div class="right-section">
        <MudText Typo="Typo.h3" Class="mb-2">New Here?</MudText>
        <MudText Typo="Typo.h5" Class="mb-4">Sign up and discover a great amount of new opportunities</MudText>
        <MudButton Variant="Variant.Outlined"
                   Class="sign-up-button"
                   OnClick="@(() => Navigation.NavigateTo("/signup"))">
            Sign Up
        </MudButton>
    </div>
</div>

@code {
    private string email = "";
    private string password = "";
    private bool showPassword;

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (!string.IsNullOrEmpty(token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            Navigation.NavigateTo("/");
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private bool IsValidForm()
    {
        return !string.IsNullOrWhiteSpace(email) &&
               !string.IsNullOrWhiteSpace(password);
    }

    private async Task HandleLogin()
    {
        if (!IsValidForm())
        {
            Snackbar.Add("Please fill in all required fields", Severity.Warning);
            return;
        }

        try
        {
            var formContent = new FormUrlEncodedContent(new[]
            {
                new KeyValuePair<string, string>("email", email),
                new KeyValuePair<string, string>("password", password)
            });

            var response = await Http.PostAsync("api/user/login", formContent);

            if (response.IsSuccessStatusCode)
            {
                var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponse>();

                await LocalStorage.SetItemAsync("authToken", loginResponse.Token);
                Http.DefaultRequestHeaders.Authorization =
                    new AuthenticationHeaderValue("Bearer", loginResponse.Token);

                Snackbar.Add("Login successful!", Severity.Success);
                Navigation.NavigateTo("/");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Snackbar.Add($"Login failed!", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Login failed!", Severity.Error);
        }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
        public DateTime Expires { get; set; }
        public int UserId { get; set; }
    }
}
