@page "/endpoints"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject ISnackbar Snackbar
@using MudBlazor
@using System.Net.Http.Json
@using System.Text.Json
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<style>
    .companySideBar {
        width: 64px;
        height: calc(100vh - 64px);
        position: fixed;
        left: 0;
        top: 64px;
        padding: 16px 8px;
        background-color: #f0f0f0;
        display: flex;
        flex-direction: column;
        align-items: center;
        box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        z-index: 1;
    }

    .mainContent {
        margin-left: 80px;
        padding: 20px;
        padding-top: 84px;
    }

    .entirePage {
        background-color: white;
        min-height: 100vh;
        padding: 20px;
    }

    .sideBarButtons {
        margin-top: 16px;
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 16px;
    }

    .endpoints-iframe {
        width: 100%;
        height: 600px;
        border: none;
        border-radius: 8px;
        margin-bottom: 32px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
</style>

<div class="companySideBar">
    <div class="sideBarButtons">
        <MudTooltip Text="Back" Placement="Placement.Right">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" OnClick="@(() => Navigation.NavigateTo("/"))" />
        </MudTooltip>
    </div>
</div>

<div class="entirePage">
    <div class="mainContent">
        <div class="d-flex align-center mb-10">
            <MudText Typo="Typo.h3" Style="color: black;">Endpoints</MudText>
        </div>

        @if (IsLoading)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        }
        else if (Endpointss?.Any() == true)
        {
            @foreach (var endpoint in Endpointss)
            {
                <MudText Typo="Typo.h6" Class="mb-1">@endpoint.Name</MudText>
                <iframe class="endpoints-iframe" src="@($"http://localhost:5000/api/endpoint/getSpec?endpointID={endpoint.EndpointID}")"></iframe>
            }
        }
        else
        {
            <MudText>No endpoints available.</MudText>
        }
    </div>
</div>

@code {
    private List<EndpointResponse>? Endpointss;
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("authToken");
        if (string.IsNullOrEmpty(token))
        {
            Snackbar.Add("You are not logged in", Severity.Warning);
            Navigation.NavigateTo("/login");
            return;
        }

        Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        
        try
        {
            IsLoading = true;

            var response = await Http.GetFromJsonAsync<List<EndpointResponse>>("http://localhost:5000/api/endpoint/getAll", new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            Endpointss = response;
        }
        catch (Exception ex)
        {
            Snackbar.Add("Failed to load endpoints: " + ex.Message,Severity.Error);
            Endpointss = new();
        }
        finally
        {
            IsLoading = false;
        }
    }

    public class EndpointResponse
    {
        public int EndpointID { get; set; }
        public string Name { get; set; } = "";
    }
}
