@page "/"
@using Microsoft.AspNetCore.Authorization.Infrastructure
@using MudBlazor.Utilities
@using MyMudBlazorApp.Objects

<PageTitle>Company</PageTitle>

<style>
    .companySideBar {
        width: 200px;
        height: 100vh;
        position: fixed;
        left: 0;
        top: 0;
        padding: 16px;
        background-color: #636363;
    }

    .mainContent {
        margin-left: 220px;
        padding: 20px;
    }

    .entirePage {
        background-color: white;
        min-height: 100vh;
        padding: 20px;
    }

    .companyTable {
        background-color: white;
        border-radius: 8px;
    }

    .mud-table-row {
        width: fit-content;
        background-color: white;
    }

    .sideBarButtons {
        margin-top: 220px;
    }
    
    .mud-table th, .mud-table td {
        width: 200px;
        min-width: 200px;
        max-width: 200px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
    
    .sidebarButton
    {
        color:  #ffffff;
        background-color: #3b3b3b;
    }
    
    .mud-icon-root 
    {
        color: orange;
    }
    
</style>

<MudPaper Class="companySideBar">
    <MudStack Class="sideBarButtons" Spacing="4">
        <MudButton Class="sidebarButton" Variant="Variant.Filled" FullWidth="true">Back</MudButton>
        <MudButton Class="sidebarButton" Variant="Variant.Filled" FullWidth="true">Profile</MudButton>
        <MudButton Class="sidebarButton" Variant="Variant.Filled" FullWidth="true">Settings</MudButton>
        <MudButton Class="sidebarButton" Variant="Variant.Filled" Color="Color.Error" FullWidth="true">Delete Company</MudButton>
    </MudStack>
</MudPaper>

<div class="entirePage">
    <div class="mainContent">
        <h1 style="color: black">Company</h1>
        <MudTable class="companyTable" Items="@Elements" Filter="new Func<User, bool>(FilterFunc1)" MultiSelection="true" SelectionChangeable="true" Hover="true"
                  @bind-SelectedItems="_selectedItems" SelectOnRowClick="false">
            <ToolBarContent>
                <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Roles</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="Roles">@context.RolesToString()</MudTd>
                <MudTd DataLabel="Actions">
                    <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Warning">Edit User</MudButton>
                    <MudButton Class="mt-3" ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Error">Delete User</MudButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager/>
            </PagerContent>
        </MudTable>
    </div>
</div>

@code {
    private HashSet<User> _selectedItems = new HashSet<User>();
    private IEnumerable<User> Elements = new List<User>();
    private string searchString1 = "";
    protected override Task OnInitializedAsync()
    {
        var company = new Objects.Company("JP Morgan");
        company.AddUser(new User("Elias", "EAL@DTU.dk"));
        company.AddUser(new User("Meg", "SHUTUPMEG@FAMILY.com"));
        company.AddUser(new User("Noobos Imaginos", "MrNoob@LOOL.dk"));
        company.AddUser(new User("Fixos Logos", "DEANPHAR@lulw.tv"));
        company.GetUsers().First().Roles.Add(new Role("DEAN"));
        company.GetUsers().First().Roles.Add(new Role("PHAR"));
        company.GetUsers().First().Roles.Add(new Role("BUILD"));

        Elements = company.GetUsers();
        return Task.CompletedTask;
    }
    
    private bool FilterFunc1(User element) => FilterFunc(element, searchString1);

    private bool FilterFunc(User element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }
}
    