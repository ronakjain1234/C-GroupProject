@page "/company/{companyId:int}"
@using System.Net.Http.Json
@using Web = DatabaseHandler.Data.Models.Web.ResponseObjects;
@using DatabaseHandler.Data.Models.Web.ResponseObjects;
@using MyMudBlazorApp.Services
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject HttpClient Http



<PageTitle>@_company.companyName</PageTitle>

<style>
    .companySideBar {
        width: 64px;
        height: calc(100vh - 64px);
        position: fixed;
        left: 0;
        top: 64px;
        padding: 16px 8px;
        background-color: #f0f0f0;
        display: flex;
        flex-direction: column;
        align-items: center;
        box-shadow: 2px 0 5px rgba(0,0,0,0.1);
        z-index: 1;
    }

    .mainContent {
        margin-left: 80px;
        padding: 20px;
        padding-top: 84px;
    }

    .entirePage {
        background-color: white;
        min-height: 100vh;
        padding: 20px;
    }

    .companyTable {
        background-color: white;
        border-radius: 8px;
    }

    .sideBarButtons {
        margin-top: 16px;
        width: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 16px;
    }

    .deleteCompanyButton {
        margin-top: auto;
        margin-bottom: 16px;
    }

    .companyTitle {
        display: flex;
        align-items: center;
    }

        .companyTitle h1 {
            margin: 0;
            padding: 0;
        }

    .mud-table th, .mud-table td {
        width: 200px;
        min-width: 200px;
        max-width: 200px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
</style>

<div class="companySideBar">
    <div class="sideBarButtons">
        <MudTooltip Text="Back" Placement="Placement.Right">
            <MudIconButton Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" OnClick="@(() => Navigation.NavigateTo("/"))" />
        </MudTooltip>
        

        <MudTooltip Text="Add User" Placement="Placement.Right">
            <MudIconButton Icon="@Icons.Material.Filled.PersonAdd"
                           Color="Color.Primary"
                           OnClick="@(() => OpenAddUserDialog())" />
        </MudTooltip>

        <MudTooltip Text="Manage Roles" Placement="Placement.Right">
            <MudIconButton Icon="@Icons.Material.Filled.ManageAccounts"
                          Color="Color.Primary"
                          OnClick="@(() => Navigation.NavigateTo("http://localhost:5084/company/3/roles"))" />
        </MudTooltip>

        <MudTooltip Text="Bulk Manage Roles" Placement="Placement.Right">
            <MudIconButton Icon="@Icons.Material.Filled.GroupAdd"
                           Color="Color.Primary"
                           Disabled="@(!_selectedItems.Any())"
                           OnClick="@OpenBulkRolesDialog" />
        </MudTooltip>

        <MudTooltip Text="Delete Company" Placement="Placement.Right">
            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                           Color="Color.Error"
                           aria-label="Delete Company"
                           Class="deleteCompanyButton"
                           OnClick="@(() => DeleteCompany())" />
        </MudTooltip>
    </div>
</div>

<div class="entirePage">
    <div class="mainContent">
        <div class="companyTitle mb-10">
            <div style="display: flex; align-items: center; gap: 10px;">
                <MudTextField @bind-Value="_company.companyName"
                            Placeholder="Company Name"
                            Disabled="@_isCompanyNameDisabled"
                            Class="mt-2"
                            Typo="Typo.h3"
                            Style="max-width: 250px; color: black;"
                            Variant="Variant.Text" />

                <MudTooltip Text="@(_isCompanyNameDisabled ? "Edit Company" : "Cancel Edit")">
                    <MudIconButton Icon="@(_isCompanyNameDisabled ? Icons.Material.Filled.Edit : Icons.Material.Filled.Close)"
                                 Color="Color.Warning"
                                 aria-label="Toggle Edit Mode"
                                 OnClick="@ToggleEditMode" />
                </MudTooltip>

                <MudTooltip Text="Save Changes">
                    <MudIconButton Icon="@Icons.Material.Filled.Save"
                                 Color="Color.Success"
                                 Disabled="@_isCompanyNameDisabled"
                                 aria-label="Save Company Name"
                                 OnClick="@SaveCompanyName" />
                </MudTooltip>
            </div>
        </div>

        <MudTable class="companyTable" Items="@_company.users" Filter="new Func<Web.User, bool>(FilterFunc)" MultiSelection="true" SelectionChangeable="true" Hover="true"
                  @bind-SelectedItems="_selectedItems" SelectOnRowClick="false">
            <ToolBarContent>
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Roles</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>

            <RowTemplate>
                <MudTd DataLabel="Name">@context.userName</MudTd>
                <MudTd DataLabel="Email">@context.email</MudTd>
                <MudTd DataLabel="Roles">@context.RolesToString()</MudTd>
                <MudTd DataLabel="Actions">
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                 Color="Color.Warning" 
                                 aria-label="Manage Roles" 
                                 Size="Size.Medium"
                                 OnClick="@(() => OpenUserRolesDialog(context))" />
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" aria-label="Remove Role" Size="Size.Medium"
                                   OnClick="@(() => RemoveUserFromCompany(context))" />
                </MudTd>
            </RowTemplate>

            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>
</div>

@if (_isAddUserOpen)
{
    <MudOverlay Visible="_isAddUserOpen" DarkBackground="true" AutoClose="false">
        <MudPaper Elevation="24" Class="pa-4 compact-dialog">
            <div class="d-flex justify-space-between align-center mb-2">
                <div>
                    <MudText Typo="Typo.h5">Add User to Company</MudText>
                    <MudText Typo="Typo.subtitle1" Color="Color.Primary">@_company.companyName</MudText>
                </div>
                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="CloseAddUserDialog" />
            </div>
            
            <MudPaper Elevation="0" Class="pa-4">
                <MudTextField @bind-Value="_newUserEmail"
                            Label="Email"
                            Variant="Variant.Outlined"
                            FullWidth="true"
                            Class="mt-4"
                            Immediate="true"
                            Validation="@(new Func<string, IEnumerable<string>>(ValidateEmail))" />
            </MudPaper>

            <MudDivider DividerType="DividerType.Middle" Class="my-3"/>

            <div class="d-flex justify-end gap-2">
                <MudButton Color="Color.Error" 
                          Variant="Variant.Filled" 
                          StartIcon="@Icons.Material.Filled.Close" 
                          OnClick="CloseAddUserDialog">Cancel</MudButton>
                      
                <MudButton Color="Color.Primary" 
                          Variant="Variant.Filled" 
                          StartIcon="@Icons.Material.Filled.PersonAdd" 
                          OnClick="@(() => CreateNewUser(_newUserEmail))"
                          Disabled="@(!IsValidEmail(_newUserEmail))">Add User</MudButton>
            </div>
        </MudPaper>
    </MudOverlay>
}

@if (_isBulkRolesOpen)
{
    <MudOverlay Visible="_isBulkRolesOpen" DarkBackground="true" AutoClose="false">
        <MudPaper Elevation="24" Class="pa-4 compact-dialog">
            <div class="d-flex justify-space-between align-center mb-2">
                <div>
                    <MudText Typo="Typo.h5">Bulk Role Management</MudText>
                    <MudText Typo="Typo.subtitle1" Color="Color.Primary">Selected Users: @_selectedItems.Count</MudText>
                </div>
                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Default" OnClick="CloseBulkRolesDialog" />
            </div>
            
            <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-0" Class="swipeable-tabs" Centered="true">
                <MudTabPanel Text="Available Roles" Style="padding: 0">
                    <MudPaper Elevation="0" Class="endpoint-paper">
                        <MudTable Items="@AvailableRoles" Dense="true" Hover="true" Class="endpoint-table"
                                 Elevation="0" Style="background-color: white;" MultiSelection="true"
                                 @bind-SelectedItems="_selectedRoles">
                            <HeaderContent>
                                <MudTh Style="width: 50px;">
                                    <MudTableHeaderCheckbox T="Web.Role" />
                                </MudTh>
                                <MudTh Style="width: 50px;">Role Name</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd Style="width: 50px;">
                                    <MudTableCheckbox T="Web.Role" Value="context" />
                                </MudTd>
                                <MudTd Style="width: 50px;">@context.roleName</MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudPaper>
                </MudTabPanel>
            </MudTabs>

            <MudDivider DividerType="DividerType.Middle" Class="my-3"/>

            <div class="d-flex justify-end gap-2">
                <MudButton Color="Color.Error" 
                          Variant="Variant.Filled" 
                          StartIcon="@Icons.Material.Filled.Close" 
                          OnClick="CloseBulkRolesDialog">Close</MudButton>
                      
                <MudButton Color="Color.Primary" 
                          Variant="Variant.Filled" 
                          StartIcon="@Icons.Material.Filled.Add" 
                          OnClick="BulkAddSelectedRoles"
                          Disabled="@(!_selectedRoles.Any())">Add Selected Roles</MudButton>
            </div>
        </MudPaper>
    </MudOverlay>
}

@code {
    private HashSet<Web.User> _selectedItems = new();
    private string _newUserName = string.Empty;
    private string _newUserEmail = string.Empty;
    private string _newCompanyName = string.Empty;
    private Web.CompanyInfoResponse _company = new() { companyName = "", users = new List<Web.User>() };
    private string searchString = "";
    private string _originalCompanyName = "";
    private List<string> _roles = new();
    private bool _isCompanyNameDisabled = true;
    private bool _isBulkRolesOpen;
    private bool _isAddUserOpen;
    private HashSet<Web.Role> _selectedRoles = new();
    private List<Web.Role> AvailableRoles = new();
    private DialogOptions dialogOptions = new DialogOptions
    {
        MaxWidth = MaxWidth.Small,
        FullWidth = true,
        CloseOnEscapeKey = true,
        Position = DialogPosition.Center,
        CloseButton = true,
        NoHeader = false
    };
    private Web.User _selectedUser;

    private async Task OpenBulkRolesDialog()
    {
        if (_selectedItems.Any())
        {
            await LoadAvailableRoles();
            _isBulkRolesOpen = true;
            StateHasChanged();
        }
    }

    private void CloseBulkRolesDialog()
    {
        _isBulkRolesOpen = false;
        _selectedRoles.Clear();
        StateHasChanged();
    }

    private async Task LoadAvailableRoles()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<Web.GetRolesInCompanyResponse>($"api/company/getRolesInCompany?companyID={companyID}&userID=1");
            if (result != null)
            {
                AvailableRoles = result.roles;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading roles: {ex.Message}", Severity.Error);
        }
    }

    private async Task BulkAddSelectedRoles()
    {
        try
        {
            foreach (var role in _selectedRoles)
            {
                foreach (var user in _selectedItems)
                {
                    await AddRoleToUser(user, role.roleID);
                }
            }
            CloseBulkRolesDialog();
            await LoadCompanyData();
                Snackbar.Add($"Roles added to {_selectedItems.Count} users successfully!", Severity.Success);
            }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding roles: {ex.Message}", Severity.Error);
        }
    }

    private void ToggleEditMode()
    {
        if (_isCompanyNameDisabled)
        {
            _originalCompanyName = _company.companyName;
            _isCompanyNameDisabled = false;
        }
        else
        {
            _company.companyName = _originalCompanyName;
            _isCompanyNameDisabled = true;
        }
    }

    private async Task SaveCompanyName()
    {
        _isCompanyNameDisabled = true;
        await ChangeCompanyName(_company.companyName);
    }

    [Parameter] public int companyID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<Web.CompanyInfoResponse>($"http://localhost:5000/api/company/getCompany?userID=1&companyID={companyID}");

            if (result != null)
            {
                _company = result;
                _newCompanyName = _company.companyName ?? string.Empty;

                foreach (var user in result.users)
                {
                    var roles = string.Join(", ", user.roles.Select(r => r.roleName));
                    _roles.Add($"{user.userName}: {roles}"); 
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            Snackbar.Add("Failed to load company data", Severity.Error);
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private bool FilterFunc(Web.User user)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (user.userName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (user.email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task ChangeCompanyName(string companyName)
    {
        try
        {
            var url = $"/api/company/changeCompanyName?userID=1&companyID={companyID}&newCompanyName={Uri.EscapeDataString(companyName)}";

            var response = await Http.PutAsync(url, null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add($"Company name updated to '{companyName}' successfully!", Severity.Success);
                await LoadCompanyData();
            }
            else
            {
                Snackbar.Add($"Failed to update company name. Please try again later.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating company name: {ex.Message}", Severity.Error);
        }
    }

    private async Task CreateRole(string roleName)
    {
        if (string.IsNullOrWhiteSpace(roleName))
        {
            Snackbar.Add("Role name cannot be empty.", Severity.Warning);
            return;
        }

        try
        {
            var response = await Http.PostAsync($"/api/company/createRole?userID=1&companyID={companyID}&name={Uri.EscapeDataString(roleName)}", null);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add($"Role '{roleName}' created successfully!", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Failed to create role '{roleName}'", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating role: {ex.Message}", Severity.Error);
        }
    }

    private async Task AddRoleToUser(User user, int roleID)
    {
        try
        {
            if (user == null || roleID <= 0)
            {
                Snackbar.Add("Invalid user or role ID", Severity.Error);
                return;
            }

            var response = await Http.PutAsync($"http://localhost:5000/api/company/addRoletoUser?mainUserID=1&userID={user.userID}&companyID={companyID}&roleID={roleID}", null);
            
            if (response.IsSuccessStatusCode)
            {
                var role = user.roles.FirstOrDefault(r => r.roleID == roleID);
                var roleName = role?.roleName ?? "Unknown Role";
                await LoadCompanyData();
            }
            else
            {
                Snackbar.Add($"Failed to add role to user", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding role to user: {ex.Message}", Severity.Error);
        }
    }

    private async Task RemoveRoleFromUser(User user, int roleID)
    {
        try
        {
            var response = await Http.DeleteAsync($"http://localhost:5000/api/company/removeRoleFromUser?mainUserID=1&userID={user.userID}&companyID={companyID}&roleID={roleID}");
            if (response.IsSuccessStatusCode)
            {
                var role = user.roles.FirstOrDefault(r => r.roleID == roleID);
                var roleName = role?.roleName ?? "Unknown Role";
                Snackbar.Add($"Role '{roleName}' removed from user successfully!", Severity.Success);
                await LoadCompanyData();
            }
            else
            {
                Snackbar.Add($"Failed to remove role from user", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error removing role from user: {ex.Message}", Severity.Error);
        }
    }

    private async Task RemoveUserFromCompany(User user)
    {
        try
        {
            var response = await Http.DeleteAsync($"http://localhost:5000/api/company/removeUser?mainUserID=1&userID={user.userID}&companyID={companyID}");
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("User removed successfully!", Severity.Success);
                await LoadCompanyData();
            }
            else
            {
                Snackbar.Add("Failed to remove user", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error removing user: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadCompanyData()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<Web.CompanyInfoResponse>($"api/company/getCompany?userID=1&companyID={companyID}");
            if (result != null)
            {
                _company = result;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading company data: {ex.Message}", Severity.Error);
        }
    }

    private async Task AddUserToCompany(User user, string email)
    {
        try
        {            
            var url = $"/api/company/addUser?mainUserID=1&email={Uri.EscapeDataString(email)}&companyID={companyID}";

            var response = await Http.PostAsJsonAsync(url, new { companyID = companyID, user = user });
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("User added successfully!", Severity.Success);
                await LoadCompanyData();
            }
            else
            {
                Snackbar.Add("Failed to add user", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding user: {ex.Message}", Severity.Error);
        }
    }
    private async Task CreateNewUser(string newUserEmail)
    {
        if (string.IsNullOrWhiteSpace(newUserEmail))
        {
            Snackbar.Add("Email is required.", Severity.Warning);
            return;
        }

        try
        {
            var addUserResponse = await Http.PostAsync(
                $"http://localhost:5000/api/company/addUser?mainUserID=1&email={Uri.EscapeDataString(newUserEmail)}&companyID={companyID}", null);

            if (addUserResponse.IsSuccessStatusCode)
            {
                _isAddUserOpen = false;
                Snackbar.Add($"User added to the company successfully!", Severity.Success);
                await LoadCompanyData();
            }
            else
            {
                Snackbar.Add("Failed to add user to the company.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error adding user: {ex.Message}", Severity.Error);
        }
    }


    private async Task UpdateRole(string currentRole, string newRole)
    {
        try
        {
            var response = await Http.PutAsJsonAsync("/api/role/update", new { currentRole, newRole });
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add($"Role updated from '{currentRole}' to '{newRole}' successfully!", Severity.Success);
                await LoadCompanyData();
            }
            else
            {
                Snackbar.Add($"Failed to update role from '{currentRole}' to '{newRole}'", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating role: {ex.Message}", Severity.Error);
        }

    }


    private async Task DeleteCompany()
    {
        try
        {
            var response = await Http.DeleteAsync($"/api/company/delete?companyID={companyID}");
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Company deleted successfully!", Severity.Success);
                Navigation.NavigateTo("/"); // Redirect after successful deletion
            }
            else
            {
                Snackbar.Add("Failed to delete company", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error deleting company: {ex.Message}", Severity.Error);
        }
    }

    private void OpenAddUserDialog()
    {
        _newUserEmail = string.Empty;
        _isAddUserOpen = true;
        StateHasChanged();
    }

    private void CloseAddUserDialog()
    {
        _isAddUserOpen = false;
        _newUserEmail = string.Empty;
        StateHasChanged();
    }

    private IEnumerable<string> ValidateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            yield return "Email is required";
        else if (!email.Contains("@") || !email.Contains("."))
            yield return "Please enter a valid email address";
    }

    private bool IsValidEmail(string email)
    {
        return !string.IsNullOrWhiteSpace(email) && email.Contains("@") && email.Contains(".");
    }

    private void OpenUserRolesDialog(Web.User user)
    {
        _selectedItems.Clear();
        _selectedItems.Add(user);
        OpenBulkRolesDialog();
    }

}

