@inherits LayoutComponentBase
@using MudBlazor
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudThemeProvider />
<MudPopoverProvider />
<MudSnackbarProvider />

<div class="page">
    <main>
        <style>
            body, html {
                margin: 0;
                padding: 0;
                overflow-x: hidden;
            }

            .app-bar {
                width: 100vw;
                top: 0;
                left: 0;
            }

            .content {
                padding-top: 64px; /* Adjust based on the height of your app bar */
            }
        </style>

        @if (!ShouldHideAppBar())
        {
            <MudAppBar Class="app-bar" Color="Color.Primary" Fixed="true">
                <MudTooltip Text="Logout">
                    <MudIconButton Icon="@Icons.Material.Filled.Logout" 
                                  Color="Color.Inherit" 
                                  Edge="Edge.Start" 
                                  OnClick="LogoutAsync" />
                </MudTooltip>
                <MudSpacer />
                <MudAvatar Color="Color.Secondary" Size="Size.Medium">RJ</MudAvatar>
            </MudAppBar>
        }
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private bool ShouldHideAppBar()
    {
        var currentPath = new Uri(Navigation.Uri).AbsolutePath;
        
        // Define routes where AppBar should be hidden
        var hiddenRoutes = new List<string>
        {
            "/login",
            "/signup"
        };

        return hiddenRoutes.Any(route => currentPath.EndsWith(route, StringComparison.OrdinalIgnoreCase));
    }
    
    private async Task LogoutAsync()
    {
        // Show confirmation dialog
        bool? result = await DialogService.ShowMessageBox(
            "Logout",
            "Are you sure you want to logout?",
            yesText: "Logout", 
            cancelText: "Cancel");
            
        if (result == true)
        {
            try
            {
                // Remove auth token from local storage
                await LocalStorage.RemoveItemAsync("authToken");
                
                // Show success message
                Snackbar.Add("You have been logged out successfully", Severity.Success);
                
                // Redirect to login page
                Navigation.NavigateTo("/login", true);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Logout failed: {ex.Message}", Severity.Error);
            }
        }
    }
}