@inherits LayoutComponentBase
@implements IDisposable

@using MudBlazor
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject HttpClient Http

<MudThemeProvider />
<MudPopoverProvider />
<MudSnackbarProvider />

<div class="page">
    <main>
        <style>
            body, html {
                margin: 0;
                padding: 0;
                overflow-x: hidden;
            }

            .app-bar {
                width: 100vw;
                top: 0;
                left: 0;
            }

            .content {
                padding-top: 64px;
            }
        </style>

        @if (!ShouldHideAppBar())
        {
            <MudAppBar Class="app-bar" Color="Color.Primary" Fixed="true">
                <MudTooltip Text="Logout">
                    <MudIconButton Icon="@Icons.Material.Filled.Logout"
                                   Color="Color.Inherit"
                                   Edge="Edge.Start"
                                   OnClick="LogoutAsync" />
                </MudTooltip>
                <MudSpacer />
                <MudAvatar Color="Color.Secondary" Size="Size.Medium">@userInitials</MudAvatar>
            </MudAppBar>
        }
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private string userInitials = "??";

    protected override async Task OnInitializedAsync()
    {
        
        await LoadUserInitials();

        
        Navigation.LocationChanged += OnLocationChanged;
    }

    private async void OnLocationChanged(object sender, LocationChangedEventArgs args)
    {
       
        await LoadUserInitials();
        StateHasChanged();
    }

    private async Task LoadUserInitials()
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (string.IsNullOrEmpty(token))
            {
                userInitials = "??";
                return;
            }

            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync("api/company/getInitials");
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadAsStringAsync();
                userInitials = result.Replace("\"", "");
            }
            else
            {
                userInitials = "??";
            }
        }
        catch
        {
            userInitials = "??";
        }
    }

    private bool ShouldHideAppBar()
    {
        var currentPath = new Uri(Navigation.Uri).AbsolutePath;

        var hiddenRoutes = new List<string>
        {
            "/login",
            "/signup"
        };

        return hiddenRoutes.Any(route =>
            currentPath.EndsWith(route, StringComparison.OrdinalIgnoreCase));
    }

    private async Task LogoutAsync()
    {
        bool? result = await DialogService.ShowMessageBox(
            "Logout",
            "Are you sure you want to logout?",
            yesText: "Logout",
            cancelText: "Cancel");

        if (result == true)
        {
            try
            {
                await LocalStorage.RemoveItemAsync("authToken");
                Snackbar.Add("You have been logged out successfully", Severity.Success);
                Navigation.NavigateTo("/login", true);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Logout failed: {ex.Message}", Severity.Error);
            }
        }
    }

    public void Dispose()
    {
        
        Navigation.LocationChanged -= OnLocationChanged;
    }
}
