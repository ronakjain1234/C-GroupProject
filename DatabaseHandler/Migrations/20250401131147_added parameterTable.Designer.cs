// <auto-generated />
using System;
using DatabaseHandler;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseHandler.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250401131147_added parameterTable")]
    partial class addedparameterTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("DatabaseHandler.Data.Models.Database.Company", b =>
                {
                    b.Property<int>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyID");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("DatabaseHandler.Data.Models.Database.EndPoint", b =>
                {
                    b.Property<int>("EndPointID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EndPointID");

                    b.ToTable("EndPoints");
                });

            modelBuilder.Entity("DatabaseHandler.Data.Models.Database.MixedTables.CompanyEndPoint", b =>
                {
                    b.Property<int>("CompanyID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EndPointID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyID", "EndPointID");

                    b.ToTable("CompanyEndPoints");
                });

            modelBuilder.Entity("DatabaseHandler.Data.Models.Database.MixedTables.CompanyRole", b =>
                {
                    b.Property<int>("CompanyID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyID", "RoleID");

                    b.ToTable("CompanyRoles");
                });

            modelBuilder.Entity("DatabaseHandler.Data.Models.Database.MixedTables.EndPointParameter", b =>
                {
                    b.Property<int>("ParameterID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EndPointID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("ParameterID", "EndPointID");

                    b.ToTable("EndPointParameters");
                });

            modelBuilder.Entity("DatabaseHandler.Data.Models.Database.MixedTables.ModuleEndPoint", b =>
                {
                    b.Property<int>("ModuleID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EndPointID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("ModuleID", "EndPointID");

                    b.ToTable("ModuleEndPoints");
                });

            modelBuilder.Entity("DatabaseHandler.Data.Models.Database.MixedTables.RoleEndPoint", b =>
                {
                    b.Property<int>("RoleID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EndPointID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleID", "EndPointID");

                    b.ToTable("RoleEndPoints");
                });

            modelBuilder.Entity("DatabaseHandler.Data.Models.Database.MixedTables.UserCompany", b =>
                {
                    b.Property<int>("CompanyID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("TEXT");

                    b.HasKey("CompanyID", "UserID");

                    b.ToTable("UserCompanies");
                });

            modelBuilder.Entity("DatabaseHandler.Data.Models.Database.MixedTables.UserRole", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("UserID", "RoleID");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("DatabaseHandler.Data.Models.Database.Module", b =>
                {
                    b.Property<int>("ModuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ModuleID");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("DatabaseHandler.Data.Models.Database.Parameter", b =>
                {
                    b.Property<int>("ParameterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParameterType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ParameterID");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("DatabaseHandler.Data.Models.Database.ReferencingTables.UserActive", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("UserID");

                    b.ToTable("UserActive");
                });

            modelBuilder.Entity("DatabaseHandler.Data.Models.Database.ReferencingTables.UserEmail", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Email");

                    b.ToTable("UserEmail");
                });

            modelBuilder.Entity("DatabaseHandler.Data.Models.Database.ReferencingTables.UserPassword", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("UserID", "Password");

                    b.ToTable("UserPassword");
                });

            modelBuilder.Entity("DatabaseHandler.Data.Models.Database.Role", b =>
                {
                    b.Property<int>("RoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DatabaseHandler.Data.Models.Database.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Roles")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DatabaseHandler.Data.Models.Database.UserCreator", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreatorUserID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastChange")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("UserID", "CreatorUserID");

                    b.ToTable("UserCreator");
                });
#pragma warning restore 612, 618
        }
    }
}
